#NOP {command} {parameters};
#ALIAS {.file}
{
	#NOP %1;
	#SWITCH {"%1"}
	{
		#CASE {"load"}
		{
			#RETURN {@fFileLoad{%2}};
		};
		#CASE {"loadall"}
		{
			#RETURN {@fFileLoadAll{%2}};
		};
		#CASE {"read"}
		{
			#ECHO {@fFileRead{%2}};
		};
		#CASE {"list"}
		{
			#VAR {_file[List]} {@fFileList{%1};};
			#FOREACH {$_file[List][%*]} {_file[Name]} {#ECHO {$_file[Name]};};
			#UNVAR {_file};
		};
		#CASE {"tree"}
		{
			#VAR {_file[List]} {@fFileDirTree{%1}};
			#FOREACH {$_file[List][%*]} {_file[Name]} {#ECHO {$_file[Name]};};
			#UNVAR {_file};	  
		};
        #CASE {"write"}
        {
			#RETURN {@fFileWrite{%2}};
        };
		#DEFAULT 
		{
			#ECHO {Recognised commands are load,loadall,read,list,tree,write};
		};
	};
};

#FUNCTION {fFileLoad}
{
	.debug FILE {LOAD: %1};
	#CLASS {%1} KILL;
#NOP    #LINE QUIET #CLASS {%1} ASSIGN;
    #CLASS {%1} ASSIGN
    {
        #READ {%1};
    };
    #CLASS {%1} SIZE {_fFL[size]};
    #IF {$_fFL[size] < 1} 
    { 
        #CLASS {%1} KILL;
    };
    #UNVAR {_fFL};
	#RETURN;
};

#FUNCTION {fFileWrite}
{
	.debug FILE {WRITE: %1};
	#CLASS {%1} {write} {%1};
};

#FUNCTION {fFileLoadAll}
{
	.debug FILE {LOADALL: %1}; 
	#LOCAL {_fFLA[spec]} {@fParseFilePath{%1}};
	#LOCAL {_fFLA[list]} {@fFileList{{$_fFLA[spec][path]}{$_fFLA[spec][name].$_fFLA[spec][ext]}}};
    #IF {"$_fFLA[list]" != ""}
	{
		#FOREACH {$_fFLA[list][%*]} {file} 
		{
			#LOCAL {_fFLA[output]} {@fFileLoad{$file}};
		};
	};
	#UNVAR {_fFLA};
	#RETURN {$_fFLA[output]};
};

#FUNCTION {fFileList}
{
    #UNVAR {result};
    #LOCAL {_fFileList} {};
    #SCAN DIR {%1} {_fFileList[table]};
    #LIST {_fFileList[table]} INDEXATE {FILE};
    #LIST {_fFileList[table]} FILTER {1};

    #IF {"%2" != ""}
    {
        #LOCAL {_fFileList[match]} {%2};
        #REPLACE {_fFileList[match]} {\x2A} {\x25\x2A};
        #LIST {_fFileList[table]} INDEXATE;
        #LINE SUBSTITUTE {VARIABLES;ESCAPES} #LIST {_fFileList[table]} FILTER {$_fFileList[match]};
        #LOCAL {_fFileList[table]};
    };
    #VAR result {};
    #FOREACH {*_fFileList[table][]} {_f}
    {
        #LIST result ADD {%1/$_f};
        #REPLACE {result[-1]} {//} {/};
    };

    #UNVAR {_f};
};

#FUNCTION {fFileRead}
{
	#LOCAL {_fFileRead} {};
	#LINE SUBSTITUTE VARIABLE {#SCRIPT {_fFileRead} {while read -r line; do echo "$line"; done < %1};};
	#RETURN {$_fFileRead};
};

#FUNCTION {fFileExists}
{
	.debug FILE {fFileExists : %0}; 
	#LOCAL {_fFileExists} {};
	#SCRIPT {_fFileExists} {test -e "%1" && echo "1" || echo "0"};
	.debug FILE {fFileExists : RETURN : $_fFileExists[1]}; 
	#RETURN {$_fFileExists[1]};
};

#FUNCTION {fFileCreateDir}
{
	#SCRIPT {mkdir -p "%1"};
};

#FUNCTION {fFileDirTree}
{
	#LOCAL {_fFileDirTree} {};
	#SCRIPT {_fFileDirTree} {find "%1" -type d};
	#RETURN {$_fFileDirTree};
};

#FUNCTION {fFileGetPath}
{
	.debug FILE {fFileGetPath : %0};
	#LOCAL {_fFGP} {};
	#REGEXP {%1} {{^\/*((.+)\/)*}}
	{
		#IF {"&1" != ""}
		{
			.debug FILE {fFileGetPath : RETURN : &3};       
			#FORMAT {_fFGP} %s {&3};
		};
	};
	#RETURN {$_fFGP};	
};

#FUNCTION {fFileGetName}
{
	.debug FILE {fFileGetName : %0};
	#LOCAL {_fFGN} {%1}; 
	#REGEXP {%1} {{^(.*\/)(.*)$}}
	{
		#IF {"&1" != ""}
		{
			.debug FILE {fFileGetName : RETURN : &3};            
			#FORMAT {_fFGN} %s {&3};
		};
	};
	#RETURN {$_fFGN};
};

#FUNCTION {fFileGetExt}
{
	.debug FILE {fFileGetExt : %0};
	#LOCAL {_fFGE} {};
	#REGEXP {%1} {{^.*\.(.+)$}}
	{
		#IF {"&1" != ""}
		{
			.debug FILE {fFileGetExt : RETURN : &2};            
			#FORMAT {_fFGE} %s {&2};
		};
	};
	#RETURN {$_fFGE};
};

#FUNCTION {fParseFilePath}
{
	#LOCAL {_fParseFilePath} {};
	#REGEXP {%1} {{^(.*\/|)([^\.]+)\.((.+)|)$}}
	{
		#FORMAT {_fParseFilePath[path]} %s {&2};
		#FORMAT {_fParseFilePath[name]} %s {&3};
		#FORMAT {_fParseFilePath[ext]} %s {&4};
	};
	#RETURN {$_fParseFilePath};
};
