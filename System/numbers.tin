#FUNCTION {fDecToNumerals}
{
    #IF {%1 >= 1000} {#RETURN @fConcat{{M}  {@fDecToNumerals{@fEval{%1 - 1000}}}}};
    #IF {%1 >=  900} {#RETURN @fConcat{{CM} {@fDecToNumerals{@fEval{%1 -  900}}}}};
    #IF {%1 >=  500} {#RETURN @fConcat{{D}  {@fDecToNumerals{@fEval{%1 -  500}}}}};
    #IF {%1 >=  400} {#RETURN @fConcat{{CD} {@fDecToNumerals{@fEval{%1 -  400}}}}};
    #IF {%1 >=  100} {#RETURN @fConcat{{C}  {@fDecToNumerals{@fEval{%1 -  100}}}}};
    #IF {%1 >=   90} {#RETURN @fConcat{{XC} {@fDecToNumerals{@fEval{%1 -   90}}}}};
    #IF {%1 >=   50} {#RETURN @fConcat{{L}  {@fDecToNumerals{@fEval{%1 -   50}}}}};
    #IF {%1 >=   40} {#RETURN @fConcat{{XL} {@fDecToNumerals{@fEval{%1 -   40}}}}};
    #IF {%1 >=   10} {#RETURN @fConcat{{X}  {@fDecToNumerals{@fEval{%1 -   10}}}}};
    #IF {%1 >=    9} {#RETURN @fConcat{{IX} {@fDecToNumerals{@fEval{%1 -    9}}}}};
    #IF {%1 >=    5} {#RETURN @fConcat{{V}  {@fDecToNumerals{@fEval{%1 -    5}}}}};
    #IF {%1 >=    4} {#RETURN @fConcat{{IV} {@fDecToNumerals{@fEval{%1 -    4}}}}};
    #IF {%1 >=    1} {#RETURN @fConcat{{I}  {@fDecToNumerals{@fEval{%1 -    1}}}}};
    #RETURN;
}

#FUNCTION {fNumeralsToDec}
{
    #IF {"%1" == ""} {#LOCAL {_fNTD} {0}};
    #ELSE {#LOCAL {_fNTD} {}};
    #IF {"$_fNTD" == ""} {#REGEX {%1} {{^M(.*)}}  {#MATH {_fNTD} {@fNumeralsToDec{&2} + 1000}}};
    #IF {"$_fNTD" == ""} {#REGEX {%1} {{^CM(.*)}} {#MATH {_fNTD} {@fNumeralsToDec{&2} + 900}}};
    #IF {"$_fNTD" == ""} {#REGEX {%1} {{^D(.*)}}  {#MATH {_fNTD} {@fNumeralsToDec{&2} + 500}}};
    #IF {"$_fNTD" == ""} {#REGEX {%1} {{^CD(.*)}} {#MATH {_fNTD} {@fNumeralsToDec{&2} + 400}}};
    #IF {"$_fNTD" == ""} {#REGEX {%1} {{^C(.*)}}  {#MATH {_fNTD} {@fNumeralsToDec{&2} + 100}}};
    #IF {"$_fNTD" == ""} {#REGEX {%1} {{^XC(.*)}} {#MATH {_fNTD} {@fNumeralsToDec{&2} + 90}}};
    #IF {"$_fNTD" == ""} {#REGEX {%1} {{^L(.*)}}  {#MATH {_fNTD} {@fNumeralsToDec{&2} + 50}}};
    #IF {"$_fNTD" == ""} {#REGEX {%1} {{^XL(.*)}} {#MATH {_fNTD} {@fNumeralsToDec{&2} + 40}}};
    #IF {"$_fNTD" == ""} {#REGEX {%1} {{^X(.*)}}  {#MATH {_fNTD} {@fNumeralsToDec{&2} + 10}}};
    #IF {"$_fNTD" == ""} {#REGEX {%1} {{^IX(.*)}} {#MATH {_fNTD} {@fNumeralsToDec{&2} + 9}}};
    #IF {"$_fNTD" == ""} {#REGEX {%1} {{^V(.*)}}  {#MATH {_fNTD} {@fNumeralsToDec{&2} + 5}}};
    #IF {"$_fNTD" == ""} {#REGEX {%1} {{^IV(.*)}} {#MATH {_fNTD} {@fNumeralsToDec{&2} + 4}}};
    #IF {"$_fNTD" == ""} {#REGEX {%1} {{^I(.*)}}  {#MATH {_fNTD} {@fNumeralsToDec{&2} + 1}}};
    #RETURN $_fNTD;
};

#FUNCTION {fCleanNumber}
{
    #IF {"%1" == ""} {#RETURN};
    #LOCAL {_fCN} {%1};
    #REPLACE {_fCN} {,} {};
    #RETURN {$_fCN};
};

#NOP Currently works into the hundreds range...broken for larger complex numbers.
#FUNCTION {fTextToInt}
{
    #LOCAL wordValue {
        {zero}      {0}
        {one}       {1}
        {two}       {2}
        {three}     {3}
        {four}      {4}
        {five}      {5}
        {six}       {6}
        {seven}     {7}
        {eight}     {8}
        {nine}      {9}
        {ten}       {10}
        {eleven}    {11}
        {twelve}    {12}
        {thirteen}  {13}
        {fourteen}  {14}
        {fifteen}   {15}
        {sixteen}   {16}
        {seventeen} {17}
        {eighteen}  {18}
        {nineteen}  {19}
        {twenty}    {20}
        {thirty}    {30}
        {forty}     {40}
        {fifty}     {50}
        {sixty}     {60}
        {seventy}   {70}
        {eighty}    {80}
        {ninety}    {90}
        {hundred}   {100}
        {thousand}  {1000}
        {million}   {1000000}
        {billion}   {1000000000}
    };

    #LOCAL numInput {%0};

    #REPLACE {numInput} {-} { };
    #REPLACE {numInput} {_} { };
    #REPLACE {numInput} {,} { };
    #REPLACE {numInput} { AND } { };

    #LIST {numInput} EXPLODE { };

    #LOCAL {numWord} {};
    #FOREACH {$numInput[]} {numWord} 
    {
        #IF {$wordValue[$numWord] > 99}
        {
            #LOCAL {numOperator} {*};
        };
        #ELSE 
        {
            #LOCAL {numOperator} {+};
        };
        #IF {&{numExpression}}
        {
            #LOCAL {numExpression} {$numExpression $numOperator $wordValue[$numWord]};
        };
        #ELSE
        {
            #LOCAL {numExpression} {$wordValue[$numWord]};
        };
    };
   
    #RETURN @fEval{$numExpression};
};