#ALIAS {.aProfileSave}
{
    #NOP %1;
    #CLASS {$path[profile]/data.tin} {write} {$path[profile]/data.tin};
}
event_register {e_5_mins} {System/utils.tin} {.aProfileSave};

#NOP {message} {yes/default action} {no action};
#ALIAS {.aYesNo}
{
  #IF {"%1" == ""}
  {
    #unmacro {y};
    #unmacro {n};
    #unmacro {\ea};
    .aMessage {};
  }
  {
    .aMessage {%1 (y/n)};
    #MACRO {y}
    {
      %2;
      .aYesNo {};
    };
    #MACRO {\ea}
    {
      %2;
      .aYesNo {};
    };
    #MACRO {n}
    {
      %3;
      .aYesNo {};
    };
  };
};

#ALIAS {.aWarning}
{
	event_raise e_warning {%0};
	#ECHO {<110>************* <001>WARNING: %0<110> *****************<099>};
	#BELL;
};

#ALIAS {.aMessage}
{
  #IF {"%1" != ""}
  {
    #BELL;
    event_raise {e_notify} {message} {<171>%1} {%2};
  }
  {
    event_raise {e_notify} {message} {};
  };
};

#NOP Calculate the sum of an array of numbers;
#FUNCTION {fSumArray}
{
  #LOCAL {tmpkey} {0};
  #LOCAL {tmp} {};
  #LOCAL {fSumArray} {0};
  #FOREACH {%0} {tmp}
  {
    #IF {$tmpkey == 1}
    {
      #MATH {fSumArray} {$fSumArray + $tmp};
      #LOCAL {tmpkey} {0};
    }
    {
      #LOCAL {tmpkey} {1};
    }
  }
  #RETURN {$fSumArray};
};

#NOP Truncate a string to a specific length;
#NOP { {data to truncate} {length} };
#FUNCTION {fTrunc}
{
  #IF {"%1" == ""} RETURN;
  #IF {"%2" == ""} RETURN %1;

  #LOCAL {_fTrunc} {};
  #REGEXP {%1} {^{.{%2}}{.*}}
  {
    #FORMAT {_fTrunc} %s {&1};
  }
  {
    #FORMAT {_fTrunc} %s {%1};
  };
  #RETURN {$_fTrunc};
};

#NOP @fColourStat{{current value} {max value}}
#NOP Returns a colour from green to yellow to red
#FUNCTION {fColourStat}
{
  #LOCAL {_fCS} {};
  #MATH {_fCS} {10 * %1 / %2};
  #IF    {$_fCS >= 10} {#RETURN {<afa>};};
  #ELSEIF {$_fCS >= 9} {#RETURN {<bfa>};};
  #ELSEIF {$_fCS >= 8} {#RETURN {<cfa>};};
  #ELSEIF {$_fCS >= 7} {#RETURN {<dfa>};};
  #ELSEIF {$_fCS >= 6} {#RETURN {<efa>};};
  #ELSEIF {$_fCS >= 5} {#RETURN {<ffa>};};
  #ELSEIF {$_fCS >= 4} {#RETURN {<fea>};};
  #ELSEIF {$_fCS >= 3} {#RETURN {<fda>};};
  #ELSEIF {$_fCS >= 2} {#RETURN {<fca>};};
  #ELSEIF {$_fCS >= 1} {#RETURN {<fba>};};
  #ELSE                {#RETURN {<faa>};};
};

#NOP Output a Bar Gauge;
#NOP {content} {current value} {max value} {colour code} {gauge width};
#FUNCTION {fGauge}
{
  #LOCAL {_fG} {};
  #LOCAL {_fG[width]} {@fEval{%5}};
  #LOCAL {_fG[text]} {@fTrunc{{%1}{$_fG[width]}}};
  #LOCAL {_fG[len]} {@fEval{(%2*$_fG[width])/%3}};
  #LOCAL {_fG[max]} {@fMin{${_fG[len]};$_fG[width]}};
  #IF {${_fG[len]} > ${_fG[max]}}
  {
#NOP    #FORMAT {_fG[result]} {<%4><aaa>%s<AAA><fff>} {@fLinePad{{@fTrunc{{${_fG[text]}}{@fEval{$_fG[width]-1}}}}{+}{$_fG[width]}}};
    #FORMAT {_fG[result]} {<%4><aaa>%s<AAA><fff>} {@fLinePad{{@fTrunc{{${_fG[text]}}{@fEval{$_fG[width]-1}}}}{+}{$_fG[width]}}};
}
  {
    #REGEXP {@fLinePad{{${_fG[text]}}{}{$_fG[width]}}} {^{.{${_fG[max]}}}{.*}}
    {
#NOP      #FORMAT {_fG[result]} {<%4><aaa>%s<G05><fff>%s<AAA>} {&1} {&2};
      #FORMAT {_fG[result]} {<%4><aaa>%s<099>%s<099>} {&1} {&2};
}
    {
#NOP      #FORMAT {_fG[result]} {<%4><aaa>%s<AAA><fff>} {${_fG[text]}};
      #FORMAT {_fG[result]} {<%4><aaa>%s<099>} {${_fG[text]}};
};
  };
  #RETURN {$_fG[result]};
};

#NOP Pad a line of text to the width specified;
#NOP {lefthand contents} {righthand contents} {length};
#FUNCTION {fLinePad}
{
  #LOCAL {_fLP} {};
  #IF {"%3" == ""}
  {
    #LOCAL {_fLP[LineLength]} {@fScreen{{full}{cols}}};
  }
  {
    #LOCAL {_fLP[LineLength]} {%3};
  }
  #FORMAT {_fLP[BarLength]} {%L} {%1};
  #MATH   {_fLP[BarPad]} {$_fLP[LineLength] - $_fLP[BarLength]};
  #FORMAT {_fLP[result]} {%s%+${_fLP[BarPad]}s<099>} {%1} {%2};
  #RETURN {$_fLP[result]};
};

#NOP Evaluate a calculation;
#FUNCTION {fEval}
{
  #LOCAL {_fEval} {};
  #MATH {_fEval} {%1};
  #RETURN {$_fEval};
};

#NOP Get a specific entry from a semi-colon delimited list;
#NOP { {list} {index} };
#FUNCTION {fListValue}
{
  #LOCAL {_fLV} {};
  #IF {"%1" == "" || "%2" == ""}
  {
    #RETURN;
  };

  #LIST {_fLV[list]} {CREATE} {%1};
  #LOCAL {_fLV[pos]} {%2};
  #LIST {_fLV[list]} {GET} {$_fLV[pos]} {_fLV[result]};
  #RETURN {$_fLV[result]};
};

#FUNCTION {fStripBraces}
{
  #LOCAL {_fSB[string]} {%1};

  #IF {"${_fSB[string]}" == ""}
  {
    #RETURN;
  };

  #WHILE {"$_fSB[result]" == ""}
  {
    #REGEXP {${_fSB[string]}} {{(.*)\\x7B(.*)}}
    {
      #VAR {_fSB[string]} {&2(&3};
    }
    {
      #REGEXP {${_fSB[string]}} {{(.*)\\x7D(.*)}}
      {
        #FORMAT {_fSB[string]} %s {&2)&3};
      }
      {
        #FORMAT {_fSB[result]} %s {${_fSB[string]}};
      };
    };
  };
  #RETURN {$_fSB[result]};
}; 

#FUNCTION {fAsciiHex}
{
  #LOCAL {_fAH} {};
  #FORMAT {_fAH[dec]} {%A} {%1};
  #FORMAT {_fAH[hex]} {%X} {$_fAH[dec]};
  #VAR {_fAH[prefix]} {\x};
  #RETURN {$_fAH[prefix]$_fAH[hex]};
}

#FUNCTION {fEscapeString}
{
  #IF {"%1" == ""}
  {
    #RETURN;
  };
  #LOCAL {_fES} {};
  #LINE SUBSTITUTE {braces} {#VAR _fES[string] %1};
  #FOREACH {{(}{)}{<}{>}{?}{!}{*}{%}{"}} {_fES[char]}
  {
    #REPLACE {_fES[string]} {$_fES[char]} {@fAsciiHex{$_fES[char]}};
  }
  #RETURN {$_fES[string]};
};

#NOP Return minimum of a list of values;
#NOP {value 1} {value 2} {value 3} ...;
#FUNCTION {fMin}
{
  #LOCAL {result} {%1};
  #FOREACH {%0} {_fMin}
  {
    #IF {"$_fMin" == ""} {#LOCAL {_fMin} {0};};    
    #IF {$_fMin < $result} {#LOCAL {result} {$_fMin};};
  }
  #UNVAR {_fMin};
  #RETURN {$result};
};

#NOP Return maximum of a list of values;
#NOP {value 1} {value 2} {value 3} ...;
#FUNCTION {fMax}
{
  #LOCAL {result} {%1};
  #FOREACH {%0} {_fMax}
  {
    #IF {"$_fMax" == ""} {#LOCAL {_fMax} {0};};
    #IF {$_fMax > $result} {#LOCAL {result} {$_fMax};};
  }
  #UNVAR {_fMax};
  #RETURN {$result};
};

#NOP Return a comma separated string from a list of values;
#FUNCTION {fCommaList}
{
  #VAR {_fCL[sep]} {, };
  #LOCAL {result} {};
  #IF {"%0" == ""} #RETURN;
  #FOREACH {%0} {s}
  {
    #IF {"$result" != ""}
    {
      #LOCAL {result} {$result$_fCL[sep]};
    };
    #LOCAL {result} {${result}$s};
  };
  #UNVAR {_fCL};
  #RETURN {$result};
};

/*
	Usage: @string_contains{ {<stringA>} {<stringB>} }
	<string> = a string
	Returns: 1 if <stringA> appears anywhere in <stringB> else 0.
*/
#FUNCTION {fStringContains} 
{
	#LOCAL _fStringContains {};
  #MATH {_fStringContains} {"%2" == "%*%1%*"};
  #RETURN {$_fStringContains};
};

#NOP @fWordWrap{ {string} {length} }
#FUNCTION {fWordWrap}
{
  #FORMAT {_fWW} {%w} {{%1}{%2}};
  #IF {&_fWW[] > 1}
  {
    #VAR {_fWW} {$_fWW[%*]};
  };
  #ELSE
  {
    #VAR {_fWW} {%1}; 
  };
  #LOCAL result {$_fWW};
  #UNVAR {_fWW};
  #RETURN {$result};
};

#NOP Split a multi-line string into a list
#FUNCTION {fSplitString}
{
    #VAR {_fSS} {%0};
    #LOCAL result {};

    #REPLACE {_fSS} {;} {+SC+};
    #REPLACE {_fSS} {\n} {;};
    #REPLACE {_fSS} {{\ }} {+SP+};
    #REPLACE {_fSS} {\\} {\\};

    #LIST result CREATE {$_fSS};

    #FOREACH {*result[]} {l} 
    {
        #LINE SUBSTITUTE VARIABLE 
        {
            #REPLACE {result[$l]} {+SC+} {;};
            #REPLACE {result[$l]} {+SP+} { };
        };
    };
    #RETURN {$result};
};

#FUNCTION {fMath}
{
    #MATH {_fMath} {%0};
    #LOCAL result {$_fMath};
    #UNVAR {_fMath};
    #RETURN {$result};
};

#FUNCTION {fGetTimestamp}
{
  #LOCAL {_fGT} {};
  #FORMAT {_fGT} {%t} {%Y-%m-%d %H:%M:%S};
  #RETURN {$_fGT};
};

#FUNCTION {fGetHash}
{
  #LOCAL {_fGH} {};
  #FORMAT {_fGH} {%H} {%0};
  #RETURN {$_fGH};
};

#NOP pass in a 2 dimensional array and it returns a formatted table of the data.
#FUNCTION {fTable}
{
  #LOCAL {_fTable[data]} {%0};
  #LOCAL {_fTable[index]} {0};
  #FOREACH {*_fTable[data][]} {r}
  {
    #UNLOCAL {_fTable[data][$r][desc]};
    #FORMAT {_fTable[indexlength]} {%L} {$r};    
    #LOCAL {_fTable[index]} {@fMax{{$_fTable[indexlength]}{$_fTable[index]}}};
    #FOREACH {*_fTable[data][$r][]} {c}
    {
      #FORMAT {_fTable[datalength]} {%L} {$_fTable[data][$r][$c]};
      #FORMAT {_fTable[titlelength]} {%L} {$c};
      #IF {&_fTable[columns][$c] == 0} {#LOCAL {_fTable[columns][$c]} {0}};
      #LOCAL {_fTable[columns][$c]} {@fMax{{$_fTable[datalength]}{$_fTable[titlelength]}{$_fTable[columns][$c]}}};
    };
  };
  #LOCAL {_fTable[format]} {|%-$_fTable[index]s|};
  #FOREACH {*_fTable[columns][]} {c}
  {
    #LOCAL {_fTable[format]} {$_fTable[format]%-$_fTable[columns][$c]s|};
  };

  #LINE SUBSTITUTE VARIABLES #FORMAT {_fTable[header]} {<402>$_fTable[format]<099>} {Index} *_fTable[columns][];
  #LIST {_fTable[output]} CREATE {$_fTable[header]};

  #FOREACH {*_fTable[data][]} {r}
  {
    #IF {"$_fTable[linecolour]" == "<269>"} {#VAR {_fTable[linecolour]} {<169>}} {#VAR {_fTable[linecolour]} {<269>}};
    #LIST {_fTable[linedata]} CREATE {$r};
    #FOREACH {*_fTable[columns][]} {c}
    {
      #IF {&_fTable[data][$r][$c] > 0}
      {
        #LIST {_fTable[linedata]} ADD {$_fTable[data][$r][$c]};
      };
      #ELSE 
      {
        #LIST {_fTable[linedata]} ADD { };
      };
    };
    #LINE SUBSTITUTE VARIABLES #FORMAT {_fTable[line]} {$_fTable[linecolour]$_fTable[format]<099>} $_fTable[linedata][];
    #LIST {_fTable[output]} ADD {$_fTable[line]};
  };
  #RETURN {$_fTable[output]};
};

#FUNCTION {fConcat}
{
    #LOCAL {_fConcat} {};
    #UNVAR info;
    #INFO ARGUMENTS SAVE;
    #LIST {_fConcat[args]} CREATE {$info[ARGUMENTS][2..]};
    #FOREACH {$_fConcat[args][]} {_fConcat[section]}
    {
        #CAT {_fConcat[result]} {$_fConcat[section]};
    };
    #RETURN $_fConcat[result];
};