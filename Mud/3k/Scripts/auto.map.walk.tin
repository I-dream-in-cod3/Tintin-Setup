#NOP **** Auto Map Walker ****
/***********************************************************************\
 * Move room-by-room through an entire map, skipping exits that are    *
 * flagged as "avoid" (#MAP EXITFLAG <exit> AVOID) and handling void   *
 * rooms appropriately. Once all rooms have been visited, the script   *
 * should return back to the room it started in.                       *
 * Balthus - 12th March 2018                                           *
\***********************************************************************/

#VAR {_hWalk} {};

/* Get exits for the current room and work out the next exit to take */
#ALIAS {.handler_mapwalk_room}
{
    #NOP %1;
    #MAP {GET} {roomvnum}  {_hWalk[room]};
    #MAP {GET} {roomexits} {_hWalk[exits]};
    #UNVAR {_hWalk[move]};

    #NOP /* Set the path back for current room */;
    #IF {"$_hWalk[back][$_hWalk[room]]" == ""}
    {
        #IF {"$_hWalk[last]" == ""}
        {
            #VAR {_hWalk[back][$_hWalk[room]]} {0};
        };
        #ELSE
        {
            #VAR {_hWalk[back][$_hWalk[room]]} {$_hWalk[last]};
        };
    };

    #VAR {_hWalk[last]} {$_hWalk[room]};

    #FOREACH {*_hWalk[exits][]} {v}
    {
        #NOP /* Update exit list with checked real destination rooms */;
        #VAR {_hWalk[exits][$v]} {@fCheckExit{$v}};

        #NOP /* Move to an unvisited room if possible, otherwise go back */;
        #IF {$_hWalk[exits][$v] > 0}
        {
            #IF {"$_hWalk[back][$_hWalk[exits][$v]]" != ""}
            {
                #IF {"$_hWalk[exits][$v]" == "$_hWalk[back][$_hWalk[room]]"}
                {
                    #IF {"$_hWalk[move]" == ""}
                    {
                        #VAR {_hWalk[move]} {$v};
                        #VAR {_hWalk[next]} {$_hWalk[exits][$v]};
                    };
                };
            };
            #ELSE
            {
                #VAR {_hWalk[move]} {$v};
                #VAR {_hWalk[next]} {$_hWalk[exits][$v]};
            };
        };
    };
};
event_register {e_map_room_enter} {auto.map.walk.tin} {.handler_mapwalk_room};

/* Take the next exit identified above, move to the next room */
#ALIAS {.handler_mapwalk_move}
{
    #NOP %1;
    #IF {!@fDeadmanActive{600}}
    {
        .aYesNo {Continue AutoWalk?}
        {
            #VAR {auto[deadman][time]} {0};
            .handler_mapwalk_move;
        }
        {
            auto mapwalk off;
        };
    };
    #ELSEIF {"$_hWalk[move]" != ""}
    {
        #VAR {_hWalk[retry]} {$_hWalk[move]};
        .debug mapwalk {MOVE: $_hWalk[move]};
        $_hWalk[move];
    };
    #ELSE
    {
        .debug mapwalk {INFO: Walk Complete};
        auto mapwalk off;
    };
};
event_register {e_roomscan_finished} {auto.map.walk.tin} {.handler_mapwalk_move};

/* Use if an exit needs multiple attempts to pass */
#ALIAS {.handler_mapwalk_retry}
{
    #NOP %1;
    #MAP GOTO {$_hWalk[last]};
    $_hWalk[retry];
};
event_register {e_exit_retry} {auto.map.walk.tin} {.handler_mapwalk_retry};

/* Return the next "real" room in a direction (handles void rooms), or 0 if blocked */
#FUNCTION {fCheckExit}
{
    #VAR {result} {1};
    #NOP /* Return if no parameter passed */;
    #IF {"%1" == ""} {#VAR {result} {0};};

    #UNVAR {_fEC};

    #NOP /* Retrieve exit details */;
    #MAP {EXIT} {%1} {SAVE} {_fEC[exit]};
    #MAP {EXIT} {%1} {GET}  {_fEC[exit][notes]};

    #NOP /* Check if the binary 2 flag (avoid) has been set on the exit */;
    #IF {$_fEC[exit][flags] & 2}        {#VAR {result} {0};};

    #NOP /* Check if the exit has walkblock set */;
    #IF {&_fEC[exit][notes][walkblock]} {#VAR {result} {0};};

    #NOP /* Retrieve destination room flags & name */;
    #MAP AT {$_fEC[exit][destination]} {#MAP {GET} {roomflags} {_fEC[room][flag]};};
    #MAP AT {$_fEC[exit][destination]} {#MAP {GET} {roomname}  {_fEC[room][name]};};

    #NOP /* Check if the binary 1 flag (avoid) has been set on the room */;
    #IF {$_fEC[room][flag] & 1} {#VAR {result} {0};};

    #NOP /* Check if the destination is an area link room */;
    #REGEXP {$_fEC[room][name]} {{^LINK:}} {#VAR {result} {0};};

    #NOP /* Return the destination room number if clear */;
    #MATH {result} {$result * $_fEC[exit][destination]};

    #UNVAR {_fEC]};

    #RETURN {$result};
};

/* Cleanup script and unload */
#ALIAS {.handler_mapwalk_stop}
{
    #NOP %1;
    event_remove_handler {auto.map.walk.tin};
    #CLASS {$path[mud]/Scripts/auto.map.walk.tin} {kill};
};

auto add {mapwalk} {.file load {$path[mud]/Scripts/auto.map.walk.tin};} {} {.handler_mapwalk_stop;};
.handler_mapwalk_room;
