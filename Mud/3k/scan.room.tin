#NOP **** Variables ****

#VAR {room} {};

#NOP **** Triggers ****
#NOP ** brief no map

#NOP ** brief/verbose with map
#NOP #ACTION {{^(\S.{68})[?:\@|\+|\^|v|E].*}}
#NOP {
#NOP     #REGEXP {%1} {{(.*) \(([a-z,]*)\).*$}}
#NOP     {
#NOP         #VAR {room} {};
#NOP         #VAR {room[name]} {&2};
#NOP         #NOP handler_parse_room_exits {&3};
#NOP         event_raise {e_room_header};
#NOP     };
#NOP } {2};

#NOP *********** Aliases **************;

#ALIAS {handler_room_contents}
{
	#NOP %1;
    #LOCAL {_HRC} {};
	#LIST {_HRC[tokenized]} CREATE {%2};
	#LOCAL {_HRC[item][id]} {$_HRC[tokenized][2]};
	#LOCAL {_HRC[item][name]} {$_HRC[tokenized][3]};
	#REPLACE {_HRC[tokenized][4]} {/} {;};
	#REPLACE {_HRC[tokenized][4]} {#N} {$_HRC[tokenized][2]};
	#LIST {_HRC[item][actions]} CREATE {$_HRC[tokenized][4]};
	#LIST {room[contents][$_HRC[tokenized][1]]} ADD {{$_HRC[item]}};
	#SWITCH {"${_HRC[tokenized][1]}"}
	{
		#CASE {"npc"}
		{
			#LOCAL {_HRC[item][data]} {$_npc[@fGetNPCRegex{$_HRC[item][name]}]};
		};
		#CASE {"item"}
		{
			#LOCAL {_HRC[item][data]} {$_item[@fGetItemRegex{$_HRC[item][name]}]};
		};
	};
	event_raise e_room_${_HRC[tokenized][1]} {$_HRC[item][id]} {$_HRC[item][name]} {$_HRC[item][actions]} {$_HRC[item][data]};
};
event_register e_mip_HAA h_room_contents handler_room_contents;
event_register e_mip_HAB h_room_contents handler_room_contents;

#ALIAS {handler_room_end}
{
	#NOP %1;
	#IF {&room[contents][player][] <= 0}
	{
		#IF {"&room[commandqueue][1]" != "0"}
		{
			#FOREACH {$room[commandqueue][%*]} {v}
			{
				#LINE SUBSTITUTE VARIABLES {$v};
			};
			#UNVAR {room[commandqueue]};
		};
		event_raise e_roomscan_end;
		#IF {!@fLocked{room.%*}}
		{
			.debug SCAN {Finished};
			event_raise e_roomscan_finished;
		};
		#ELSE 
		{
			event_register {e_lock_removed} {scan.room.tin} 
			{
                #NOP %%1;
				#IF {!%@fLocked{room.%*}} 
                {
                    .debug SCAN {Lock Removed};
                    #SEND {!glance}
                };
			};
		};
	};
	#ELSE
	{
		event_raise e_roomscan_finished;
	};
};

#ALIAS {.HandlerRoomExits}
{
	#NOP %1;
	#IF {"$mip[last]" != "BAD"}
	{
		#VAR {room[exits]} {%2};
		#REPLACE {room[exits]} {,} {;};
	};
};
event_register {e_mip_DDD} {h_room_exits} {.HandlerRoomExits};

#ALIAS {.HandlerRoomName}
{
	#NOP %1;
	#VAR {room} {};
	#REGEXP {%2} {{^(.*?)\s*\(([a-z\s,]*)\)\s*$}}
	{
		#VAR {room[name]} {&2};
	}
	{
		#VAR {room[name]} {%2};
	};
	.debug SCAN {Room Name: $room[name]};
	event_oneshot e_prompt h_room_enter {#NOP %%1;event_raise e_room_enter;};
	event_oneshot e_prompt h_room_end handler_room_end;
};
#NOP event_register {e_mip_BAD} {h_room_name} {.HandlerRoomName};
event_register {e_ansiflag_R} {h_room_name} {.HandlerRoomName};